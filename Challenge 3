import java.util.ArrayList;
import java.util.List;

public class Solution {
    public static int[] solution(int[] pegs) {
        int[] ratio = {-1,-1};
        int x0 = pegs[1];
        int x1 = 0; 
        int diff = pegs[1] - pegs[0]; 
        // length = 2
        if (pegs.length == 2){
            if (diff % 3 == 0){
                ratio[0] = diff / 3 * 2;
                ratio[1] = 1;
            }
            else{
                ratio[0] = diff * 2;
                ratio[1] = 3;
            }
            return ratio;
        }
        // equation: record all distance between gears
        List<Integer> equations = new ArrayList<>();
        equations.add(diff);
        // (1 or 3)lastR = d1 - d2 + d3 - d4 ....
        for (int i = 2; i < pegs.length; i++){
            x1 = pegs[i];
            equations.add(x1 - x0);
            if (i % 2 == 0){
                diff = diff - (x1 - x0);
            }
            else{
                diff = diff + (x1 - x0);
            }
            x0 = x1;
        }
        // if (1 or 3) lastR > 0, we have solution
        if (diff > 0){
            // when # of gear odd, lastR = diff
            double previousR = diff;
            // when # of gear even
            if (pegs.length % 2 == 0){
                // 3 lastR = diff
                previousR = diff / 3.0;
            }
            // check each gear size validity 
            for (int i = equations.size() - 1; i >= 0; i--){
                previousR = equations.get(i) - previousR;
                if (previousR <= 1){
                    return ratio;
                }
            }
            // when # of gear odd, firstR = 2*diff
            if (pegs.length % 2 != 0){
                ratio[0] = 2 * diff;
                ratio[1] = 1;
            }
            // when # of gear even, firstR = 2 * diff/3
            // given 3 lastR = diff 
            else{
                ratio[0] = 2 * diff;
                ratio[1] = 3;
            }
            return ratio;
        }
        // else, return -1,-1
        return ratio;
    }

}
